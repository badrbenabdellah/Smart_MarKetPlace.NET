<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Smart MarketPlace</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="icon" type="image/x-icon" href="~/favicon.ico" />
    <meta name="description" content="Smart MarketPlace - AI Mission Generator for Professional Freelancers" />
    <meta name="author" content="Smart MarketPlace" />
</head>
<body class="animate-fadeInUp">
    <header>
        <nav class="navbar-professional">
            <div class="container">
                <div class="navbar-content">
                    <a class="navbar-brand-professional animate-fadeInScale" href="~/">
                        <div class="brand-text">AI Job Mission Generator</div>
                        <div class="brand-subtitle">Create professional freelance missions in seconds with artificial intelligence</div>
                    </a>
                </div>
            </div>
        </nav>
    </header>
    
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>



    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
    
    <script>
        // Sophisticated entry animations
        document.addEventListener('DOMContentLoaded', function() {
            // Progressive element animation
            const elements = document.querySelectorAll('.glass-card, .hero-section, .btn-gradient');
            
            const observer = new IntersectionObserver((entries) => {
                entries.forEach((entry, index) => {
                    if (entry.isIntersecting) {
                        setTimeout(() => {
                            entry.target.style.opacity = '1';
                            entry.target.style.transform = 'translateY(0)';
                        }, index * 100);
                    }
                });
            }, {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            });
            
            elements.forEach(el => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(30px)';
                el.style.transition = 'opacity 0.8s ease-out, transform 0.8s ease-out';
                observer.observe(el);
            });
            
            // Light parallax effect for hero section
            const heroSection = document.querySelector('.hero-section');
            if (heroSection) {
                window.addEventListener('scroll', () => {
                    const scrolled = window.pageYOffset;
                    const rate = scrolled * -0.3;
                    if (scrolled < 500) {
                        heroSection.style.transform = `translateY(${rate}px)`;
                    }
                });
            }
            
            // Button hover animations
            const buttons = document.querySelectorAll('.btn-gradient');
            buttons.forEach(btn => {
                btn.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-3px) scale(1.02)';
                });
                
                btn.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0) scale(1)';
                });
            });
        });
    </script>
</body>
</html>