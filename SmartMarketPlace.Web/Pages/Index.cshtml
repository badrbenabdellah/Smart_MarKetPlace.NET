@page
@model IndexModel
@{
    ViewData["Title"] = "Smart MarketPlace - Mission Generator";
}

<div class="container">
    <div class="row justify-content-center" style="margin-top: 2rem;">
        <div class="col-lg-8 col-md-10">
            <div class="glass-card animate-fadeInScale">
                <div class="card-header-glass">
                    <h5>✨ Intelligent Mission Generator</h5>
                </div>
                <div class="card-body-glass">
                    <form id="missionForm">
                        <div class="form-group">
                            <label for="prompt" class="form-label-modern">Mission Description</label>
                            <textarea class="form-control form-control-modern" id="prompt" rows="5" 
                                placeholder="Describe your project in a few words... Ex: Mobile e-commerce application, budget 8000€, Paris, France" 
                                required></textarea>
                            <div class="form-text-modern">💡 Include: technology, budget, location, duration for optimal results</div>
                        </div>
                        
                        <div class="form-group">
                            <label for="language" class="form-label-modern">Generation Language</label>
                            <select class="form-select form-select-modern" id="language">
                                <option value="auto" selected>🌐 Automatic Detection</option>
                                <option value="french">🇫🇷 Français</option>
                                <option value="english">🇺🇸 English</option>
                                <option value="arabic">🇸🇦 العربية</option>
                                <option value="spanish">🇪🇸 Español</option>
                            </select>
                        </div>
                        
                        <button type="submit" class="btn btn-gradient" id="generateBtn">
                            <span class="btn-text">Generate My Mission</span>
                            <div class="loading-spinner d-none" id="spinner"></div>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div id="loadingIndicator" class="text-center d-none" style="margin: 2rem 0;">
                <div class="loading-spinner mx-auto"></div>
                <p style="color: rgba(255, 255, 255, 0.8); margin-top: 1rem;">Creating your mission...</p>
            </div>

            <div id="errorContainer" class="d-none">
                <div class="alert alert-modern">
                    <strong>⚠️ Error:</strong> <span id="errorMessage"></span>
                </div>
            </div>

            <div id="resultContainer" class="d-none">
                <div class="result-card">
                    <div class="result-header d-flex justify-content-between align-items-center">
                        <h5 id="missionTitle">Mission</h5>
                        <button class="btn btn-sm btn-outline-light" id="copyJsonBtn">Copy JSON</button>
                    </div>
                    <div class="result-body">
                        <div class="row">
                            <div class="col-md-8">
                                <h6 id="descriptionLabel" class="fw-semibold">Description</h6>
                                <div id="missionDescription" class="markdown-content-modern mb-4"></div>
                                
                                <h6 id="expertiseLabel" class="fw-semibold">Required Expertise</h6>
                                <div id="requiredExpertise" class="mb-4"></div>
                            </div>
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-body">
                                        <h6 id="detailsLabel" class="fw-semibold">Mission Details</h6>
                                        <table class="table table-sm table-modern">
                                            <tbody>
                                                <tr>
                                                    <th id="positionLabel">Position</th>
                                                    <td id="position"></td>
                                                </tr>
                                                <tr>
                                                    <th id="locationLabel">Location</th>
                                                    <td id="location"></td>
                                                </tr>
                                                <tr>
                                                    <th id="workModeLabel">Work Mode</th>
                                                    <td id="workMode"></td>
                                                </tr>
                                                <tr>
                                                    <th id="durationLabel">Duration</th>
                                                    <td id="duration"></td>
                                                </tr>
                                                <tr>
                                                    <th id="experienceLabel">Experience</th>
                                                    <td id="experience"></td>
                                                </tr>
                                                <tr>
                                                    <th id="contractTypeLabel">Contract Type</th>
                                                    <td id="contractType"></td>
                                                </tr>
                                                <tr>
                                                    <th id="dailyRateLabel">Daily Rate</th>
                                                    <td id="dailyRate"></td>
                                                </tr>
                                                <tr>
                                                    <th id="domainLabel">Domain</th>
                                                    <td id="domain"></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<footer class="footer-glass">
    <p>© 2025 - Smart MarketPlace</p>
</footer>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const apiUrl = '@Model.ApiBaseUrl/api/JobMission/generate';
            let generatedJson = null;
            
            // Default UI labels in English
            const defaultLabels = {
                description: "Description",
                expertise: "Required Expertise",
                details: "Mission Details",
                position: "Position",
                location: "Location",
                workMode: "Work Mode",
                duration: "Duration",
                experience: "Experience",
                contractType: "Contract Type",
                dailyRate: "Daily Rate",
                domain: "Domain"
            };
            
            // Language-specific placeholders
            const placeholders = {
                french: "Example: React developer with TypeScript expertise, budget 8000, city Paris, country France",
                english: "Example: Java developer with Spring Boot expertise, budget 10000, city London, country UK",
                arabic: "مثال: مطور جافا مع خبرة في سبرينج بوت، ميزانية 10000، المدينة الرياض، البلد السعودية",
                spanish: "Ejemplo: Desarrollador Java con experiencia en Spring Boot, presupuesto 10000, ciudad Madrid, país España"
            };
            
            // Update placeholder based on selected language
            document.getElementById('language').addEventListener('change', function() {
                const selectedLanguage = this.value;
                if (selectedLanguage !== 'auto') {
                    document.getElementById('prompt').placeholder = placeholders[selectedLanguage] || placeholders.english;
                } else {
                    document.getElementById('prompt').placeholder = placeholders.english;
                }
            });
            
            // Update UI labels based on response
            function updateUILabels(labels, detectedLanguage) {
                const uiLabels = labels || defaultLabels;
                
                document.getElementById('descriptionLabel').textContent = uiLabels.description || defaultLabels.description;
                document.getElementById('expertiseLabel').textContent = uiLabels.expertise || defaultLabels.expertise;
                document.getElementById('detailsLabel').textContent = uiLabels.details || defaultLabels.details;
                document.getElementById('positionLabel').textContent = uiLabels.position || defaultLabels.position;
                document.getElementById('locationLabel').textContent = uiLabels.location || defaultLabels.location;
                document.getElementById('workModeLabel').textContent = uiLabels.workMode || defaultLabels.workMode;
                document.getElementById('durationLabel').textContent = uiLabels.duration || defaultLabels.duration;
                document.getElementById('experienceLabel').textContent = uiLabels.experience || defaultLabels.experience;
                document.getElementById('contractTypeLabel').textContent = uiLabels.contractType || defaultLabels.contractType;
                document.getElementById('dailyRateLabel').textContent = uiLabels.dailyRate || defaultLabels.dailyRate;
                document.getElementById('domainLabel').textContent = uiLabels.domain || defaultLabels.domain;
                
                // Update language dropdown to match detected language
                if (detectedLanguage) {
                    const languageSelect = document.getElementById('language');
                    for (let i = 0; i < languageSelect.options.length; i++) {
                        if (languageSelect.options[i].value === detectedLanguage) {
                            languageSelect.selectedIndex = i;
                            break;
                        }
                    }
                }
            }
            
            // Set default English labels on page load
            updateUILabels(defaultLabels);
            
            document.getElementById('missionForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const prompt = document.getElementById('prompt').value;
                const language = document.getElementById('language').value;
                
                if (!prompt) {
                    showError('Please enter mission details');
                    return;
                }
                
                // Show loading indicator
                document.getElementById('loadingIndicator').classList.remove('d-none');
                document.getElementById('resultContainer').classList.add('d-none');
                document.getElementById('errorContainer').classList.add('d-none');
                
                try {
                    console.log('Sending request to:', apiUrl);
                    console.log('Request payload:', { prompt, language });
                    
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            prompt: prompt,
                            language: language
                        })
                    });
                    
                    console.log('Response status:', response.status);
                    const data = await response.json();
                    console.log('Response data:', data);
                    
                    if (!response.ok) {
                        throw new Error(data.error || 'Mission generation failed');
                    }
                    
                    if (data.error) {
                        throw new Error(data.error);
                    }
                    
                    generatedJson = data;
                    
                    // Update UI labels from response
                    updateUILabels(data.uiLabels, data.detectedLanguage);
                    
                    // Display the mission
                    displayMission(data);
                } catch (error) {
                    console.error('Error:', error);
                    showError(error.message || 'Failed to connect to API. Make sure both API and Web applications are running.');
                } finally {
                    document.getElementById('loadingIndicator').classList.add('d-none');
                }
            });
            
            document.getElementById('copyJsonBtn').addEventListener('click', function() {
                if (generatedJson) {
                    navigator.clipboard.writeText(JSON.stringify(generatedJson, null, 2))
                        .then(() => {
                            const btn = this;
                            const originalText = btn.textContent;
                            btn.textContent = 'Copied!';
                            setTimeout(() => {
                                btn.textContent = originalText;
                            }, 2000);
                        })
                        .catch(err => {
                            console.error('Failed to copy: ', err);
                        });
                }
            });
            
            function displayMission(mission) {
                // Display title
                document.getElementById('missionTitle').textContent = mission.title || 'Mission';
                
                // Display description using marked.js for markdown rendering
                const descriptionEl = document.getElementById('missionDescription');
                descriptionEl.innerHTML = mission.description ? marked.parse(mission.description) : 'No description provided';
                
                // Display expertise tags
                const expertiseEl = document.getElementById('requiredExpertise');
                expertiseEl.innerHTML = '';
                if (mission.requiredExpertises && mission.requiredExpertises.length > 0) {
                    mission.requiredExpertises.forEach(skill => {
                        const badge = document.createElement('span');
                        badge.className = 'badge-modern';
                        badge.textContent = skill;
                        expertiseEl.appendChild(badge);
                    });
                } else {
                    expertiseEl.textContent = 'No expertise specified';
                }
                
                // Display mission details
                document.getElementById('position').textContent = mission.position || 'Not specified';
                document.getElementById('location').textContent = mission.city && mission.country ? 
                    `${mission.city}, ${mission.country}` : 'Not specified';
                document.getElementById('workMode').textContent = mission.workMode || 'Not specified';
                document.getElementById('duration').textContent = mission.duration && mission.durationType ? 
                    `${mission.duration} ${mission.durationType}` : 'Not specified';
                document.getElementById('experience').textContent = mission.experienceYear || 'Not specified';
                document.getElementById('contractType').textContent = mission.contractType || 'Not specified';
                document.getElementById('dailyRate').textContent = mission.estimatedDailyRate ? 
                    `${mission.estimatedDailyRate} EUR` : 'Not specified';
                document.getElementById('domain').textContent = mission.domain || 'Not specified';
                
                // Show result container
                document.getElementById('resultContainer').classList.remove('d-none');
            }
            
            function showError(message, rawDetails = null) {
                const errorContainer = document.getElementById('errorContainer');
                document.getElementById('errorMessage').textContent = message;
                
                errorContainer.classList.remove('d-none');
            }
        });
    </script>
}